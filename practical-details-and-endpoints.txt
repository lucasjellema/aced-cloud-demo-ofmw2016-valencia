This document contains some practical details regarding the demo, such as the endpoints of services and the URL for the frontend. See the SoapUI test project for sample calls to the web services mentioned below.

Updated for Split, Croatia - March 2017

identity domain partnercloud17
data Center: US Commercial 2
https://myservices.us.oraclecloud.com/mycloud/partnercloud17/faces/dashboard.jspx

LJ: +3


passphrase keys: welcome1

DBaaS:
======
Host: 129.144.152.41
Service: soacsdb.partnercloud17.oraclecloud.internal

user=cloudace

JCS/SOA CS:
===========
public host: 129.144.151.143



user: weblogic
password: Welcome_1

WLS Console:  https://129.144.151.143:7002/console
EM FMW Control: https://129.144.151.143:7002/em 


/u01/app/oracle/middleware/wlserver

Domain Home:  /u01/data/domains/soacs4em_domain


Worklist application:
https://129.144.151.143/integration/worklistapp/faces/login.jspx
(note: port 80 - while probably running on managed server/cluster)

Datasource: jdbc/cloudaceDS,  jdbc/worldDS and  jdbc/cloudaceXA  (to DBaaS - cloudace schema)
DB Adapter Connection: eis/DB/cloudace, eis/DB/cloudacex


internal endpoint for webservice calls: http://soacs4emeapartner-jcs-wls-1:9073 

ProposedActsService
http://129.144.151.143/soa-infra/services/default/ProposedActsService/ProposedActsService?WSDL 



NewActProposalService
http://129.144.151.143/soa-infra/services/default/NewActProposalsServices/NewActProposalsService


JCS
===

REST API fo r Logging (to be picked up by Log Analytics)

http://129.144.151.143:80/WebLogicLoggerService/resources/logger/log


context root: SoaringProposalManager

ADF Application:

http://129.144.151.143/SoaringProposalManager/


REST API for retrieving news stories:

http://129.144.151.143/SoaringTheWorldAtRestService/resources/world-rss/feed/nos



Real Time Business Integration Insight:
=======================================
Host: 129.144.252.132

user: weblogic


WLS Console: https://129.144.252.132:7002/console 
EM FMW Control: https://129.144.252.132:7002/em 

Insight Composer: https://129.144.252.132/insight 


Application Container Cloud
===========================
endpoint Artist-Enricher-API:
https://Artist-Enricher-API-partnercloud17.apaas.us6.oraclecloud.com

fetch details on U2:
https://Artist-Enricher-API-partnercloud17.apaas.us6.oraclecloud.com/artists/get?artist=u2

(spotify API:  https://developer.spotify.com/web-api/ )



using PSM for deployment

list all applications:
psm accs apps

http://www.olrichs.nl/2017/03/use-psm-to-push-your-application-to-accs.html?m=1

create container in storage cloud:

curl -i -X PUT -u lucas.jellema@amis.nl:password  https://partnercloud17.storage.oraclecloud.com/v1/Storage-partnercloud17/Artist-Enricher-API

Put the application archive in the Storage Container.
curl -i -X PUT -u lucas.jellema@amis.nl:85tgn7Lex3  https://partnercloud17.storage.oraclecloud.com/v1/Storage-partnercloud17/Artist-Enricher-API/artist-enricher-api.zip -T ./artist-enricher-api.zip

psm accs push -n Artist-Enricher-API  -u Artist-Enricher-API/artist-enricher-api.zip -t "latest" -of json

psm accs operation-status -j 10247694 -of json


after deployment:

https://artist-enricher-api-partnercloud17.apaas.us6.oraclecloud.com/cache-api/about

Store something in cache:
PUT https://artist-enricher-api-partnercloud17.apaas.us6.oraclecloud.com/cache-api/<key>
BODY should contain a valid JSON object
Content-Type application/json

To get something from the cache:
GET  https://artist-enricher-api-partnercloud17.apaas.us6.oraclecloud.com/cache-api/<key>





Storage Cloud Service Console: https://storageconsole.us2.oraclecloud.com/aHR0cHM6Ly9wYXJ0bmVyY2xvdWQxNy5zdG9yYWdlLm9yYWNsZWNsb3VkLmNvbS92MS9TdG9yYWdlLXBhcnRuZXJjbG91ZDE3/?root=containers&container=_apaas# 


Event Hub Platform
==================
public IP:  	129.144.150.6

connect descriptor: 	129.144.150.6:6667

Zookeeper: port 2181

REST proxy:  129.144.152.204	

Topic: partnercloud17-SoaringEventBus 


EH Service (== Topic)
=====================
https://psm.us.oraclecloud.com/psmui/faces/paasRunner.jspx?serviceType=OEHCS

REST Endpoint for Topic SoaringEventBus 

https://129.144.152.204:1080/restproxy/topics/partnercloud17-SoaringEventBus


REST for Service Management:
https://psm.us.oraclecloud.com/paas/api/v1.1/instancemgmt/partnercloud17/services/cs/instances

curl -I -X GET       -u "lucas.jellema@amis.nl:password"      -H "X-ID-TENANT-NAME: partnercloud17"      -H "Accept: application/json"       https://psm.us.oraclecloud.com/paas/api/v1.1/instancemgmt/partnercloud17/services/cs/instances




REST API:  https://apicatalog.oraclecloud.com/ui/views/apicollection/oracle-public/oehcs-produce-consume/1.0/oehcs-produce-consume

Doc on REST API:
http://docs.oracle.com/cloud/latest/event-hub-cloud/EHKRA/api-Topics.html

Doc Platform REST API: http://docs.oracle.com/cloud/latest/event-hub-cloud/EHPRA/index.html  

Docs: http://docs.oracle.com/cloud/latest/event-hub-cloud/index.html 


See SOAP UI:

produce messages

consume message from partition
create consumer instance

http://docs.oracle.com/cloud/latest/event-hub-cloud/EHKRA/op-restproxy-consumers-%7BgroupName%7D-post.html


consume messages in consumer group as consumer instance


using CLI: PSM
-- accessing event hub through CLI: http://docs.oracle.com/en/cloud/paas/java-cloud/pscli/oehcs-commands.html

list all services (topics)
psm oehcs services

psm oehcs update-service 
-- details for a single service
psm oehcs service --service-name partnercloud17-SoaringEventBus
psm oehcs service --service-name SoaringEventBus

topic: partnercloud17-SoaringEventBus

Rest Proxy URI:
https://129.144.152.204:1080/restproxy/topics/partnercloud17-SoaringEventBus


creating a consumer instance - response:
{
   "instance_id": "my_consumer",
   "base_uri": "http://localhost:8082/consumers/ConsumerGroupA/instances/my_consumer"
}

/restproxy/consumers/ConsumerGroupA/instances/my_consumer/topics/partnercloud17-SoaringEventBus


to fetch the certificate for the REST Proxy:

openssl s_client -connect {HOSTNAME}:{PORT} -showcerts
https://129.144.152.204:1080/restproxy/topics/partnercloud17-SoaringEventBus

openssl s_client -connect 129.144.152.204:1080 -showcerts


-----BEGIN CERTIFICATE-----
MIIDSDCCAjACCQC7LlUB9gSPQzANBgkqhkiG9w0BAQUFADBmMQswCQYDVQQGEwJV
UzETMBEGA1UECAwKQ2FsaWZvcm5pYTEXMBUGA1UEBwwOUmVkd29vZCBTaG9yZXMx
DzANBgNVBAoMBk9yYWNsZTEYMBYGA1UEAwwPb3JhY2xlY2xvdWQuY29tMB4XDTE3
MDMwMzEwMzk0NVoXDTE4MDMwMzEwMzk0NVowZjELMAkGA1UEBhMCVVMxEzARBgNV
BAgMCkNhbGlmb3JuaWExFzAVBgNVBAcMDlJlZHdvb2QgU2hvcmVzMQ8wDQYDVQQK
DAZPcmFjbGUxGDAWBgNVBAMMD29yYWNsZWNsb3VkLmNvbTCCASIwDQYJKoZIhvcN
AQEBBQADggEPADCCAQoCggEBAM2kz3f9fUcD6Zdt1Z/z6L4bzTTQLvIvLXikUDeY
rIEu1FG74NQjQE9xgXXE4BzJVTv3Q/KInjoBjfO8O4OBbIITOisvS0wrXNOkGhKg
vCHG4JvwngvOyAqS8bjKAPxpF0CIOl+jsJesbRpsOcOC/6ZSdKA3cxy66pRi8Ab1
V9TxnjQW30nEmMuf35kAjRlBfvIEGtBS36o3uBao/KF9bFjzSmbdPTAipzN+zKBG
mLJm/KQit8NQQukwvBkZ5SJmxj0j4ft2nvkQPbtzchd7olyPO80Mjqi3OKPfar6I
CjiVjII53mV9tNApqevIxl+x6zuyNsUOI2EZFf8NJIp8Gz8CAwEAATANBgkqhkiG
9w0BAQUFAAOCAQEArq8AGDNeVYt21nHOi2xzcfTwpZ/q4s9JuT55MzNUoilN282i
8zLzCFwAnMCsEr3zI5bpNKHcOhllc+WxDoL8rLdly+96YGolwzR6rxtz9dqZBcqZ
q5oEs96XgySyQY01CX336szjQer1AAWkt+z+/T5qh7SljEALW1cRyn1b22XIA6qL
xgvgShApLMAhxn0NIDB2266lbUbuSzimKbYXfgfYR/kqngSF/+JuHr58jNLqvvqj
/JlLdTKA5OO9A08FgY40nRbRCa2FSac9RzD4dXcTvoU/xWZHMWpgl8NnNPb/KZvH
8Mh/4W19YfVY/4CEswXYHBpXNpVrDNVm/7E9VA==
-----END CERTIFICATE-----


POST 
https://artist-enricher-api-partnercloud17.apaas.us6.oraclecloud.com/eventhub-api

local: http:127.0.0.1:5101/eventhub-api

body should contain valid JSON object ; under the key records should be an array of objects with each two properties : key and value
{
    "records":[
        {
            "key":"your key",
            "value":"your message"
        },
        {
            "value":"Second message",
            "partition":1
        },
        {
            "value":"Third"
        }
    ]
}

this one works:


create consumer group (groupname soaring-events-consumer-group, consumer name: soaring-events-consumer
curl -u admin:Ooow2016  -k -X POST -H "Content-Type: application/vnd.kafka.json.v1+json"  -d "{ \"name\":  \"soaring-events-consumer\", \"format\": \"json\" }"  https://129.144.152.204:1080/restproxy/consumers/soaring-events-consumer-group


check on partitions in topic:
curl -u admin:Ooow2016  -k https://129.144.152.204:1080/restproxy/topics/partnercloud17-SoaringEventBus/partitions/1
{"partition":1,"leader":1,"replicas":[{"broker":1,"leader":true,"in_sync":true}]}

Produce message:
curl -X POST -k -u admin:Ooow2016 -H "Content-Type: application/vnd.kafka.json.v1+json"  -d "{ \"records\": [ { \"key\": \"myKey\", \"value\": \"mySpecialValue\"}] }" "https://129.144.152.204:1080/restproxy/topics/partnercloud17-SoaringEventBus"


Consume message - levering the consumer group soaring-events-consumer-group and the consumer instance soaring-events-consumer:
curl -u admin:Ooow2016  -k --header "Accept: application/vnd.kafka.json.v1+json"  https://129.144.152.204:1080/restproxy/consumers/soaring-events-consumer-group/instances/soaring-events-consumer/topics/partnercloud17-SoaringEventBus

=========================


http://127.0.0.1:5101/eventhub-api/create-consumer-group

{
  "status": "POST  returned 200",
  "body": "{\"instance_id\":\"soaring-events-consumer\",\"base_uri\":\"http://localhost:8082/consumers/soaring-events-consumer-group/instances/soaring-events-consumer\"}"
}




EventHub-API GET  - get messages
===
http://127.0.0.1:5101/eventhub-api/messages

Target URL https://129.144.152.204:1080/restproxy/consumers/soaring-events-consumer-group/instances/soaring-events-consumer/topics/partnercloud17-SoaringEventBus
200
BODY:"[{\"key\":\"tody\",\"value\":\"18th  march 2017\",\"partition\":1,\"offset\":7}]"

API Platform CS
===============

https://129.144.150.67:7002/console

https://129.144.150.67:7202/apiplatform

weblogic/1PaaS5pl1t

129.144.150.67

API Portal: http://129.144.150.67:7201/developers/apis/dev  


DevCS
=====
https://developer.us2.oraclecloud.com/developer85307-partnercloud17 



IoT CS
======
identity domain: iotpartner217
Service Console: https://iotpartner217-iotpartner217.iot.us.oraclecloud.com/ui/ 


OMC
===
https://myservices.us2.oraclecloud.com/mycloud/faces/dashboard.jspx


Twitter:
====

GMail/Google:
===
username soaringacrosstheclouds@gmail.com
password: Ooow2016





===========================================================================
old details for Oracle OpenWorld 2016

Final JET based Frontend application - the Oracle OpenWorld Appreciation Event latest news portal:

https://frontend-metcsgse00739.apaas.us2.oraclecloud.com/ - also at: http://bit.ly/acesdemo


Twitter account where new proposals are tweeted:  https://twitter.com/SaibotAirport  


Sites CS:

https://docs-gse00000225.sites.us2.oraclecloud.com/ACEDCLOUD_Kraftwerk/





ICS (REST/JSON, POST) - Submit a community suggestion (to be called from IoT CS)
=================================================================================
This service uses an integration on ICS that is mapped to the REST POST service on top of PCS to submit a proposal to initiate the workflow to approve the suggestion

http://104.155.49.139/ics/integration/flowapi/rest/SUBMITCOMMUNITYARTISTPROPOSAL/v01/artistsuggestions

POST a JSON payload similar to:

{ "proposal" : 
  { "artist" : "dj tiesto"
  , "numberOfVotes" : 21
  , "source": "twitter"
  } 
}


ICS (REST/JSON, POST) - IoT CS Drop Off for community suggestions (to be called from IoT CS)
============================================================================================
This service routes to PCS.

Through the proxy - no authorization required and now problems with Data Center hops:

http://104.155.49.139/ics/integration/flowapi/rest/IOTC_DROP_AND_ROUT_TO_PCS_COMM/v01/iot-events

and directly on ICS
https://icsdem0058service-icsdem0058.integration.us2.oraclecloud.com/integration/flowapi/rest/IOTC_DROP_AND_ROUT_TO_PCS_COMM/v01/iot-events


It accepts a JSON payload in a format that is native to IoT CS:

[ { "id": "Id Value"
,"source": "someValue"
, "sentTime": "someOtherValue"
, "eventTime": "someEventOtherValue"
  , "payload" :     { "data":  {"max_of_data_hashtag": "mahalia jackson", "count_of_data_hashtag": 48}
}
}
]


IoT CS Drop Off that bypasses PCS workflow:
===========================================
As an alternative there is the IoT CS drop off that is  mapped to the SOA CS NewActProposalService (bypassing the human workflow on PCS). 

http://104.155.49.139/ics/integration/flowapi/rest/IOTCS_DROPOF_REST_TO_COMMUN/v01/iot-events (no security required)

or directly to ICS, with Authorization Header:
https://icsdem0058service-icsdem0058.integration.us2.oraclecloud.com/integration/flowapi/rest/IOTCS_DROPOF_REST_TO_COMMUN/v01/iot-events (no security required)

It accepts a JSON payload in a format that is native to IoT CS:

[ { "id": "Id Value"
,"source": "someValue"
, "sentTime": "someOtherValue"
, "eventTime": "someEventOtherValue"
  , "payload" :     { "data":  {"max_of_data_hashtag": "mahalia jackson", "count_of_data_hashtag": 48}
}
}
]




PCS (SOAP/XML) - one way Submit an act proposal - to be called from ICS when IoT CS has dropped off a suggestion
================================================================================================================
(note: this PCS service invokes the next ICS service "Submit a new proposed act" for an act proposal that been approved; it also invokes the "Verify whether a proposal already exists for a certain act" service on ICS (see below); any act for which a proposal already exists is immediately forwarded to "Submit a new proposed act" on ICS; the result is that the number of votes for that act is increased and a new Tweet is published)

http://104.155.49.139/pcs/soa-infra/services/default/ArtistProposalProcess!1.0*soa_6ce6e099-d89e-4fae-aaf6-c77d44769a11/SubmitActProposal.service?WSDL (via proxy, no authorization)


or directly at PCS - with authorization:


https://pcs1-gse00000196.process.us2.oraclecloud.com/soa-infra/services/default/ArtistProposalProcess!1.0*soa_6ce6e099-d89e-4fae-aaf6-c77d44769a11/SubmitActProposal.service?WSDL



https://cloud.oracle.com/en_US/sign-in
Data Center: US Commercial 2
Identity Domain: gse00000196

pcsUsername= 'cloud.admin';
pcsPassword = 'preservedPoundage=4';

Service Console: 
	

request message looks like this:

<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" 
  xmlns:sub="http://xmlns.oracle.com/bpmn/bpmnCloudProcess/ArtistProposalProcess/SubmitActProposal">
   <soapenv:Header/>
   <soapenv:Body>
      <sub:start>
         <name>u2</name>
         <voteCount>7</voteCount>
      </sub:start>
   </soapenv:Body>
</soapenv:Envelope>


Note: a fallback service on PCS was created earlier with the following details:

http://104.155.49.139/pcs/soa-infra/services/default/TakeThree!1*soa_8a16e235-9036-4d22-bc36-f5a32c2b496e/KickOffApproval.service (via proxy, no authorization)
or directly at PCS:
https://pcs-gse00000225.process.us2.oraclecloud.com:443/soa-infra/services/default/TakeThree!1*soa_8a16e235-9036-4d22-bc36-f5a32c2b496e/KickOffApproval.service

current request message:
<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:kic="http://xmlns.oracle.com/bpmn/bpmnCloudProcess/TakeThree/KickOffApproval">
   <soapenv:Header/>
   <soapenv:Body>
      <kic:start>
         <name>jacques brel</name>
         <voteCount>11</voteCount>
      </kic:start>
   </soapenv:Body>
</soapenv:Envelope>

=============================================================
ICS seems to have a problem with one way REST or SOAP connections; that is why I created a two way REST service on the proxy that routes through to PCS:
at : REST POST to http://104.155.49.139/pcs/rest/artistProposals

{ "artistProposal" : 
  { "artistName" : "u2" 
  , "numberOfVotes" : 99
  , "source"         : "twitter"
  }
}  

response:
{"artistProposalSubmissionResult": {"status": "OK, I guess for u2"}}

ICS (SOAP/XML) - Submit a new proposed act (to be called by PCS after the act has been approved)
=================================================================================================
http://104.155.49.139/ics/integration/flowsvc/soap/PROPOSENEWACTFOR_SOAP/v01/?wsdl  - on the proxy (no security tokens needed)
=> this service invokes the corresponding service on SOA CS


The real address: https://icsdem0058service-icsdem0058.integration.us2.oraclecloud.com:443/integration/flowsvc/soap/PROPOSENEWACTFOR_SOAP/v01/ (ws-security username token  and timestamp required)



ICS - (REST/JSON, POST) Submit a new Proposed Act (to be called by PCS after the act has been approved)
=======================================================================================================
http://104.155.49.139/ics/integration/flowapi/rest/PROPOSENEWACTFOROOW2016/v01/actproposals on the proxy (no authorization required)
=> this service invokes the corresponding service on SOA CS

The real address: https://icsdem0058service-icsdem0058.integration.us2.oraclecloud.com/integration/flowapi/rest/PROPOSENEWACTFOROOW2016/v01/actproposals (with basic authorization as ICS always requires)



ICS (SOAP/XML) - Verify whether a proposal already exists for a certain act
===============================================================================
http://104.155.49.139/ics/integration/flowsvc/soap/VERIFYEXISTENCEO_FROMSOACS/v01/?wsdl  - on the proxy (no security tokens needed)
=> this service invokes the corresponding service on SOA CS

The real address: https://icsdem0058service-icsdem0058.integration.us2.oraclecloud.com/integration/flowsvc/soap/VERIFYEXISTENCEO_FROMSOACS/v01/?wsdl

(ws-security username token  and timestamp required)


ICS (REST/JSON, POST) - Tweet
=============================
Straightforward service with Twitter Adapter to tweet a message; currently configured for the Saibot Airport Twitter account at https://twitter.com/SaibotAirport

The endpoint is:

http://104.155.49.139/ics/integration/flowapi/rest/TWEET_MESSAGE_VIA_SAIBOTAI/v01/tweets (through proxy, no authorization)

The payload:
{ "tweet" : { "message": "Tweet through proxy no authorization" 
, "tag" : "saibot" } 
}

directly on ICS, requiring authorization and Data Center nearness):
https://icsdem0058service-icsdem0058.integration.us2.oraclecloud.com/integration/flowapi/rest/TWEET_MESSAGE_VIA_SAIBOTAI/v01/tweets


ACC - Artist Enrichment API
===========================
Artist enrichment API - Node.js application on application container cloud (EMEA Data Center).

Example calls:
https://artist-enricher-api-lucasjellema.apaas.em2.oraclecloud.com/artists/get?artist=the+beatles
https://artist-enricher-api-lucasjellema.apaas.em2.oraclecloud.com/artists/get?artist=madonna
https://artist-enricher-api-lucasjellema.apaas.em2.oraclecloud.com/artists/get?artist=udo+jurgens

This API is leveraged from SOA CS to enrich the submit new proposal; perhaps I will relocate this API to Oracle ACC.


This API is also available from the proxy (on Google AppEngine):

API for retrieving artist information (from Spotify and Echonest)
http://104.155.49.139/artists/artists/get?artist=the+kaiser+chiefs (http://104.155.49.139/artists/artists/get?artist=bon+jovi, http://104.155.49.139/artists/artists/get?artist=the+beatles ...) 

when ACC is broken, the artist enrichment is also done directly on the Proxy:

http://104.155.49.139/artistes/artists/get?artist=the+kaiser+chiefs


SOACS - (SOAP/XML) Submit a new Proposed Act
============================================
NewActProposalService:
http://104.155.49.139/soacs/soa-infra/services/aced-cloud-demo/NewActProposalsServices/NewActProposalsService?WSDL
(this is the address of the proxy running on Google AppEngine; the true address for the service is: 
http://140.86.4.95:8080/soa-infra/services/aced-cloud-demo/NewActProposalsServices/NewActProposalsService?WSDL
also accessible - thanks to a routing rule in OTD on the Load Balancer - at port 80)

Note: this service uses a connection to Spotify to enrich act. This connection could be ICS, SOA CS itself, Node.js on ACC

This service exposes  two operations:
- submitActProposal
- verifyExistenceActProposal


SOACS - (SOAP/XML) Retrieve details for earlier Proposed Acts
=============================================================
ProposedActsService:
http://104.155.49.139/soacs/soa-infra/services/aced-cloud-demo/ProposedActsService/ProposedActsService?wsdl
(this is the address of the proxy running on Google AppEngine; the true address for the service is: 
http://140.86.4.95:8080/soa-infra/services/aced-cloud-demo/ProposedActsService/ProposedActsService?wsdl
also accessible - thanks to a routing rule in OTD on the Load Balancer - at port 80)



MCS - (REST/JSON) Retrieve list and details of Proposed Acts
============================================================

https://mobileportalsetrial1304dev-mcsdem0001.mobileenv.us2.oraclecloud.com:443/mobile/custom/artistapi

The example call can be found in postman, including the header (see github).

oracle-mobile-backend-id 55bc25a9-52ee-4a63-8db2-ce18cab1948b
Authorization basic TUNTREVNMDAwMV9NT0JJTEVQT1JUQUxTRVRSSUFMMTMwNERFVl9NT0JJTEVfQU5PTllNT1VTX0FQUElEOmR5Nm91NW5wX3RnbE5r

There is no authentication (anonymous access right now).

Note:
the MCS API can also be accessed through the proxy. Instead of invoking 
https://mobileportalsetrial1304dev-mcsdem0001.mobileenv.us2.oraclecloud.com:443/mobile/custom/artistapi

access the proxy at:

http://104.155.49.139/mcs/mobile/custom/artistapi/acts



Oracle JET Web Application
==========================
live JET application at:

https://frontend-metcsgse00739.apaas.us2.oraclecloud.com/ - also at: http://bit.ly/1L5kIJM 
https://frontend-metcsgse00739.apaas.us2.oraclecloud.com/
https://frontend-deoracleem99369.apaas.us2.oraclecloud.com/
https://frontend-lucasjellema.apaas.em2.oraclecloud.com/


Oracle PCS
==========



Workspace Task List : (login as cloud.admin or john.dunbar who are both Process Reviewers)
https://pcs1-gse00000196.process.us2.oraclecloud.com/bpm/workspace/faces/jsf/workspace/homePage.jspx 
(go to Tracking page to review the process execution and recover faults).

Develop Process :
https://pcs1-gse00000196.process.us2.oraclecloud.com/bpm/workspace/faces/app/designer/homePage.jspx

ArtistProposalProcess within ValenciaACED space.

Management UI to Deploy:
https://pcs1-gse00000196.process.us2.oraclecloud.com/bpm/composer/faces/ui/management/management.jspx

Endpoint to invoke process:
https://pcs1-gse00000196.process.us2.oraclecloud.com/soa-infra/services/default/ArtistProposalProcess!1.0*soa_6ce6e099-d89e-4fae-aaf6-c77d44769a11/SubmitActProposal.service?WSDL



Oracle Sites Cloud Service
==========================
Authoring Environment : (login as cloud.admin)
https://docs-gse00000225.documents.us2.oraclecloud.com/sites/home/all#


Final Microsite will be produced at :
https://docs-gse00000225.sites.us2.oraclecloud.com/authsite/acedcloud_demo/
or
http://tinyurl.com/ACEDCLOUD16




ICS Service Console
===================

https://myservices.us2.oraclecloud.com/mycloud/faces/dashboard.jspx

Identity Domain: icsdem0058
username: gse_cloud-admin@oracleads.com


SOA CS Service Console (and ACC Service Console)
================================================

https://myservices.emea.oraclecloud.com/mycloud/lucasjellema/faces/dashboard.jspx 
identity domain: lucasjellema
username: lucas.jellema@amis.nl

PCS Console
===========
https://pcs-gse00000225.process.us2.oraclecloud.com/bpm/workspace/faces/worklist.jspx



Google Cloud Platform

logs: (public) http://104.155.49.139/logs

proxy engine:  (Lucas) https://console.cloud.google.com/compute/instances?project=mediator-proxy&quickstart=1&graph=GCE_CPU&duration=PT1H



Container Cloud
===============
Service NAME SoaringContainer
Public Key: soaCSPubKey.txt
Admin/Ooow2016

public ip: 
mgr - 129.144.149.45	
worker - 129.144.150.140	

from service console:
- configure Docker Hub account
- create service
RequestCounter


run OCCS
GITHUB_URL https://github.com/lucasjellema/aced-cloud-demo-ofmw2016-valencia

HOST:
129.144.150.140:8010/about